# ! /bin/python
# -*- coding: utf-8 -*-
#
# W R I T E _ C O N F I G _ P Y 2 7 . P Y
#
# Python 2.7 compatible generated by ChatGPT from python3 version
#
# Last Modified on Sun Jun 29 18:19:26 2025
#

import shutil
import json
from collections import OrderedDict

# Copying proto.c to config.c and proto.h to config.h
shutil.copyfile('proto.c', 'config.c')
shutil.copyfile('proto.h', 'config.h')

# Reading the config.json file and sorting keys alphabetically
with open('config.json', 'r') as json_file:
    json_data = json.load(json_file, object_pairs_hook=OrderedDict)

def obtain_usage(data):
    lines_usage = []
    shorts = []

    lines_usage.append('void  usage( struct config *  opt, char *  exeName )  {')
    lines_usage.append('  printf( "Usage:\\n");')
    shorts.append('  printf( " %s ')
    for value in data.itervalues():
        config_type = value.get('type')
        short = value.get('short', '')
        if config_type == 'optFlg':
            shorts.append("[-{}]".format(short))
        elif config_type == 'optInt':
            shorts.append("[-{} INT]".format(short))
        elif config_type == 'optStr':
            shorts.append("[-{} TXT]".format(short))
        elif config_type == 'optLng':
            shorts.append("[-{} INT]".format(short))
        elif config_type == 'optDbl':
            shorts.append("[-{} DBL]".format(short))
        elif config_type == 'optChr':
            shorts.append("[-{} CHR]".format(short))
    for value in data.itervalues():
        if value.get('type') == 'positionParam':
            shorts.append(" {}".format(value.get('name', '')))
    shorts.append('\\n", exeName );')
    lines_usage.append(''.join(shorts))

    for key, value in data.iteritems():
        if value.get('type') != 'positionParam':
            short = value.get('short', 'N/A')
            lines_usage.append('  printf( " %s %s\\n", opt->{}.optID, opt->{}.helpStr ); /* {} */'.format(short, short, key))
    for key, value in data.iteritems():
        if value.get('type') == 'positionParam':
            lines_usage.append('  printf( " %s %s\\n", "{}", "{}" ); /* {} */'.format(value.get('name', ''), value.get('help', ''), key))
    return lines_usage

def obtain_debug_status(data):
    lines_status = []

    lines_status.append('void  configuration_status( struct config *  opt )  {')
    for key, value in data.iteritems():
        if value.get('type', 'N/A') != 'positionParam':
            short = value.get('short', 'N/A')
            lines_status.append(
                '  printf( "Debug: option -{} is %sctive (-{} %s)\\n", (opt->{}.active) ? "a" : "ina", opt->{}.helpStr); /* {} */'.format(short, short, short, short, key))
            config_type = value.get('type')
            if config_type == 'optStr':
                lines_status.append(
                    '  printf( "Debug: option -{} value is \\"%s\\"\\n", opt->{}.optionStr); /* {} */'.format(short, short, key))
            elif config_type == 'optInt':
                lines_status.append(
                    '  printf( "Debug: option -{} value is %d, limits: %d .. %d\\n", opt->{}.optionInt, opt->{}.mostNegLimit, opt->{}.mostPosLimit); /* {} */'.format(short, short, short, short, key))
            elif config_type == 'optLng':
                lines_status.append(
                    '  printf( "Debug: option -{} value is %ld, limits: %ld .. %ld\\n", opt->{}.optionLng, opt->{}.mostNegLimit, opt->{}.mostPosLimit); /* {} */'.format(short, short, short, short, key))
            elif config_type == 'optDbl':
                lines_status.append(
                    '  printf( "Debug: option -{} value is %lg, limits: %lg .. %lg\\n", opt->{}.optionDbl, opt->{}.mostNegLimit, opt->{}.mostPosLimit); /* {} */'.format(short, short, short, short, key))
            elif config_type == 'optChr':
                lines_status.append(
                    '  printf( "Debug: option -{} value is \'%c\'\\n", opt->{}.optionChr); /* {} */'.format(short, short, key))
    for key, value in data.iteritems():
        if value.get('type') == 'positionParam':
            lines_status.append(
                '  printf( "Debug: %s (%s)\\n", opt->{}.paramNameStr, opt->{}.helpStr);'.format(key, key))
    return lines_status

def init_config(data):
    lines_init = []
    lines_init.append('void  initConfiguration ( struct config *  opt )  {')
    for key, value in data.iteritems():
        opt_type = value.get('type', 'N/A')
        help_text = value.get('help', 'N/A')
        lines_init.append("// {}: {}".format(key, opt_type))
        if opt_type == 'positionParam':
            name_str = value.get('name', 'N/A')
            lines_init.append('  opt->{}.paramNameStr = "{}";'.format(key, name_str))
            lines_init.append('  opt->{}.helpStr = "{}";'.format(key, help_text))
        else:
            short = value.get('short', 'N/A')
            lines_init.append('  opt->{}.active = FALSE;'.format(short))
            lines_init.append('  opt->{}.optID = "-{}";'.format(short, short))
            lines_init.append('  opt->{}.helpStr = "{}";'.format(short, help_text))
            if opt_type == 'optStr':
                lines_init.append('  opt->{}.optionStr = "{}";'.format(short, value.get("default", "")))
            elif opt_type == 'optChr':
                lines_init.append('  opt->{}.optionChr = \'{}\';'.format(short, value.get("default", "")))
            elif opt_type in ['optInt', 'optLng', 'optDbl']:
                lines_init.append('  opt->{}.mostPosLimit = {};'.format(short, value.get("most_pos_limit", "")))
                lines_init.append('  opt->{}.mostNegLimit = {};'.format(short, value.get("most_neg_limit", "")))
                lines_init.append('  opt->{}.option{} = {};'.format(short, opt_type[3:].capitalize(), value.get("default", "")))
                lines_init.append('  opt->{}.defaultVal = {};'.format(short, value.get("default", "")))
    return lines_init

def set_config(data):
    lines_set = []
    shorts = []

    lines_set.append('int  setConfiguration ( int  argc, char *  argv[], struct config *  opt )  {')
    lines_set.append('  int c;\n')
    lines_set.append('  opterr = 0;')
    lines_set.append('  while ((c = getopt (argc, argv, OPTIONS )) != -1 ) {')
    lines_set.append('    switch ( c ) {')

    for key, value in data.iteritems():
        opt_type = value.get('type', 'N/A')
        short = value.get('short', 'N/A')
        long_name = value.get('long', 'N/A')
        if opt_type == 'optFlg':
            lines_set.append("      case '{}': opt->{}.active = TRUE; break; /* {} */".format(short, short, long_name))
        elif opt_type == 'optStr':
            lines_set.append("      case '{}': opt->{}.active = TRUE; opt->{}.optionStr = optarg; break; /* {} */".format(short, short, short, long_name))
        elif opt_type == 'optChr':
            lines_set.append("      case '{}': configureChrOption( &opt->{}, optarg ); break; /* {} */".format(short, short, long_name))
        elif opt_type == 'optInt':
            lines_set.append("      case '{}': configureIntegerOption( &opt->{}, optarg ); break; /* {} */".format(short, short, long_name))
        elif opt_type == 'optLng':
            lines_set.append("      case '{}': configureLongOption( &opt->{}, optarg ); break; /* {} */".format(short, short, long_name))
        elif opt_type == 'optDbl':
            lines_set.append("      case '{}': configureDoubleOption( &opt->{}, optarg ); break; /* {} */".format(short, short, long_name))

    lines_set.append("      case '?' : {")
    shorts.append('        if ( strchr( "')
    for value in data.itervalues():
        if value.get('type') in ['optStr', 'optChr', 'optInt', 'optLng', 'optDbl']:
            shorts.append(value.get('short', ''))
    shorts.append('", optopt ) != NULL ) {')
    lines_set.append(''.join(shorts))
    lines_set.append('          fprintf (stderr, "Error: Option -%c requires an argument.\\n", optopt);')
    lines_set.append('          switch ( optopt ) {')
    for value in data.itervalues():
        if value.get('type') in ['optStr', 'optChr', 'optInt', 'optLng', 'optDbl']:
            short = value.get('short', 'N/A')
            lines_set.append("            case '{}': opt->{}.active = FALSE; break;".format(short, short))
    lines_set.append('          }')
    lines_set.append('        }')
    lines_set.append('        else if (isprint (optopt))')
    lines_set.append('          fprintf (stderr, "Warning: Unknown option \\"-%c\\" ? - ignoring it!\\n", optopt);')
    lines_set.append('        else')
    lines_set.append('          fprintf (stderr, "Warning: Unknown non-printable option character 0x%x ? - ignoring it!\\n", optopt);')
    lines_set.append('        break;')
    lines_set.append('      }')
    lines_set.append('    }')
    lines_set.append('  }')
    lines_set.append('  return( optind );')
    return lines_set

def concatenate_shorts(data):
    shorts = []
    shorts.append('#define OPTIONS "')
    for value in data.itervalues():
        short = value.get('short', '')
        if value.get('type') != 'optFlg':
            shorts.append(short + ":")
        else:
            shorts.append(short)
    return ''.join(shorts) + '"'

def extract_type_and_short(data):
    lines = []
    lines.append('struct config {')
    for key, value in data.iteritems():
        type_text = value.get('type', 'N/A')
        if type_text == 'positionParam':
            lines.append("  struct {} {};  /* ({}) {} */".format(type_text, key, key, value.get('help', '')))
        else:
            short = value.get('short', 'N/A')
            lines.append("  struct {} {};  /* ({}) {} */".format(type_text, short, value.get('long', ''), value.get('help', '')))
    return lines

lines2 = extract_type_and_short(json_data)
lines3 = obtain_usage(json_data)
lines4 = init_config(json_data)
lines5 = set_config(json_data)
lines6 = obtain_debug_status(json_data)

with open('config.c', 'a') as config_c_file:
    config_c_file.write("\n// Functions for Command Line Options Configuration from JSON Data\n")
    config_c_file.write("\n".join(lines3) + "\n}\n\n")
    config_c_file.write("\n".join(lines4) + "\n}\n\n")
    config_c_file.write("\n".join(lines5) + "\n}\n\n")
    config_c_file.write("\n".join(lines6) + "\n}\n")

with open('config.h', 'a') as config_h_file:
    config_h_file.write("\n// Command Line Options Configuration Data\n")
    config_h_file.write("\n".join(lines2) + "\n};\n")
    config_h_file.write("\n// getopt() option string\n" + concatenate_shorts(json_data) + "\n")
    config_h_file.write("\nvoid  usage ( struct config *  optStructPtr, char *  exeName );\n")
    config_h_file.write("void  initConfiguration ( struct config *  optStructPtr );\n")
    config_h_file.write("int  setConfiguration ( int  argc, char *  argv[], struct config *  optStructPtr );\n")
    config_h_file.write("void  configuration_status( struct config *  opt );\n")
    config_h_file.write("\n#endif\n")
